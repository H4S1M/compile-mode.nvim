*compile-mode.txt*       A plugin for Neovim inspired by Emacs' Compilation Mode

==============================================================================
Table of Contents                             *compile-mode-table-of-contents*

1. Introduction                                    |compile-mode-introduction|
2. Installation                                    |compile-mode-installation|
3. Compilation buffer                        |compile-mode-compilation-buffer|
4. Errors                                                |compile-mode-errors|
5. API                                                      |compile-mode-api|
  - setup()                                             |compile-mode.setup()|
    - error_regexp_table                     |compile-mode.error_regexp_table|
    - default_command                           |compile-mode.default_command|
    - time_format                                   |compile-mode.time_format|
    - buffer_name                                   |compile-mode.buffer_name|
    - debug                                               |compile-mode.debug|
    - error_ignore_file_list             |compile-mode.error_ignore_file_list|
    - compilation_hidden_output       |compile-mode.compilation_hidden_output|
    - recompile_no_fail                       |compile-mode.recompile_no_fail|
    - auto_jump_to_first_error         |compile-mode.auto_jump_to_first_error|
  - compile()                                         |compile-mode.compile()|
  - recompile()                                     |compile-mode.recompile()|
  - current_error()                             |compile-mode.current_error()|
  - next_error()                                   |compile-mode.next_error()|
  - prev_error()                                   |compile-mode.prev_error()|
  - send_to_qflist()                           |compile-mode.send_to_qflist()|
  - add_to_qflist()                             |compile-mode.add_to_qflist()|
  - goto_error()                                   |compile-mode.goto_error()|
  - move_to_next_error()                                |move_to_next_error()|
  - move_to_next_file()                                  |move_to_next_file()|
  - move_to_prev_error()                                |move_to_prev_error()|
  - move_to_prev_file()                                  |move_to_prev_file()|
  - interrupt()                                     |compile-mode.interrupt()|
6. Commands                                            |compile-mode-commands|
  - :Compile                                                        |:Compile|
  - :Recompile                                                    |:Recompile|
  - :CurrentError                                              |:CurrentError|
  - :NextError                                                    |:NextError|
  - :PrevError                                                    |:PrevError|
  - :QuickfixErrors                                          |:QuickfixErrors|
  - :CompileGotoError                                      |:CompileGotoError|
  - :CompileNextError                                      |:CompileNextError|
  - :CompileNextFile                                        |:CompileNextFile|
  - :CompilePrevError                                      |:CompilePrevError|
  - :CompilePrevFile                                        |:CompilePrevFile|
  - :CompileInterrupt                                      |:CompileInterrupt|

==============================================================================
1. Introduction                                    *compile-mode-introduction*

`compile-mode.nvim` is a Neovim plugin which emulates the features of Emacs’
`Compilation Mode`. It allows you to run commands which are output into a
special buffer, and then rerun that command over and over again as much as you
need. See Emacs Compilation Mode
<https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html>
for more details.

==============================================================================
2. Installation                                    *compile-mode-installation*

Use your favorite plugin manager. `compile-mode.nvim` depends on plenary.nvim
<https://github.com/nvim-lua/plenary.nvim>.

Here’s an example of a Lazy <https://github.com/folke/lazy.nvim> config for
`compile-mode.nvim`:

>lua
    return {
      "ej-shafran/compile-mode.nvim",
      branch = "latest",
      -- or a specific version:
      -- tag = "v3.0.0"
      dependencies = { "nvim-lua/plenary.nvim" },
      opts = {}
    }
<

==============================================================================
3. Compilation buffer                        *compile-mode-compilation-buffer*

The compilation buffer is the buffer into which the output of compilation
commands is placed. By default, its name is `"*compilation*"` (though this can
be configured using the |compile-mode.buffer_name| option). Its filetype is
`compilation` - this can be used to setup |autocmd|s (and thus custom keymaps
and the like).

After a command has been run, the buffer’s output will contain:

- the "default directory" - i.e., the current working directory from which the
    command was run
- the time at which compilation started
- the compilation command which was executed
- the output (`stdout` and `stderr`) of the command
- the exit status of the command (a command can exit successfully, abnormally,
    or by interruption) and when it occurred

If a compilation command is running and another one is triggered, the first
command is terminated (using |jobstop|) and this interruption is reported in
the compilation buffer. Then, after a tiny delay, the compilation buffer is
cleared and the new command starts running.

The compilation buffer has a few local commands and keymaps. The local
commands are |:CompileGotoError| and |:CompileInterrupt|, mapped to `<CR>` and
`<C-c>` respectively. Additionally, `q` is mapped to `<CMD>q<CR>` to allow for
easy closing of the compilation buffer.

The compilation buffer is deleted automatically when Neovim would be closed, so
unsaved changes don’t get in the way. It also has the |'buftype'| option set
to `nofile`.

==============================================================================
4. Errors                                                *compile-mode-errors*

The compilation buffer is checked for errors in real-time, which can then be
navigated between using |:CompileGotoError|, |:NextError|, |:PrevError| and
|:CurrentError|.

Errors are defined using the `error_regexp_table` option. Each field in the
table consists of a key (the name of the error’s source, used for debug
information) and a table value. This table has the following keys:

- {regex} (string) a Vim regex which captures the error and the relevant
  capture groups; if this regex matches a line an error is determined to be on
  that line
- {filename} (integer) the capture group number for the error’s filename
  (capture groups start at 1)
- {row} (integer|[integer, integer]) either the capture group for the row on
  which the error occurred, or capture groups for the start and end of the row
  range in which the error occurred (optional)
- {col} (integer|[integer, integer]) either the capture group for the column
  on which the error occurred, or the capture groups for the start and end of
  the column range in which the error occurred (optional)
- {type} (level|[integer,integer?]) either an error type (`INFO`, `WARNING`,
  or `ERROR`, taken from `require("compile-mode").level`) or a tuple of
  capture groups (optional, default `ERROR`)
    - If capture groups are provided and the first capture group is matched,
      the error is considered of type `WARNING`. If the second capture group
      matched, the error is considered to be of type `INFO`. -

**Note:** a type alias - `RegexpMatcher` - is available for the values of
`error_regexp_table`.

For example, to add TypeScript errors:

>lua
    require("compile-mode").setup({
        error_regexp_table = {
          typescript = {
        -- TypeScript errors take the form
        -- "path/to/error-file.ts(13,23): error TS22: etc."
            regex = "^\\(.\\+\\)(\\([1-9][0-9]*\\),\\([1-9][0-9]*\\)): error TS[1-9][0-9]*:",
            filename = 1,
            row = 2,
            col = 3,
          }
        }
    })
<

To see the default for `error_regexp_table`, look at the source code in
`lua/compile-mode/errors.lua` in the plugin’s directory (or in the repo
itself).

==============================================================================
5. API                                                      *compile-mode-api*

setup({opts})                                           *compile-mode.setup()*
    Sets up the plugin for use.

    Usage:

    >lua
	require("compile-mode").setup({
	  default_command = "npm run build",
	  -- ...other options here
	})
<

Valid keys and values for {opts}:

error_regexp_table                            *compile-mode.error_regexp_table
    See |compile-mode-errors|.

default_command                                 *compile-mode.default_command*
    The string to show in the |compile-mode.compile()| prompt as a default.
    You can set it to `""` for an empty prompt. Defaults to: `"make -k "`.

time_format                                         *compile-mode.time_format*
    The way to format the time displayed at the top of the compilation buffer.
    Passed into |strftime()|. Defaults to: `"%a %b %e %H:%M:%S"`.

buffer_name                                         *compile-mode.buffer_name*
    The name for the compilation buffer. Defaults to `"*compilation*"`.

debug                                                     *compile-mode.debug*
    Print additional debug information. This is printed using |print|, so you
    can inspect it with |:messages|.

error_ignore_file_list                   *compile-mode.error_ignore_file_list*
    A list of Vim regexes to run each error’s filename by, to check if this
    file should be ignored. Defaults to: `{ "/bin/[a-z]*sh$" }`. Passing in
    this option does not override this, but instead extends the list.

compilation_hidden_output             *compile-mode.compilation_hidden_output*
    A Vim regex or list of Vim regexes run on every line in the compilation
    buffer which will be substituted with empty strings.

recompile_no_fail                             *compile-mode.recompile_no_fail*
    When `true`, running |:Recompile| without a prior command will not fail,
    but instead simply trigger a call to |:Compile|.

auto_jump_to_first_error               *compile-mode.auto_jump_to_first_error*
    When `true`, compiling jumps to the first error as soon as it is
    available.

						      *compile-mode.compile()*
compile({param}) ~
    Run a command and place its output in the compilation buffer, reporting on
    its result. See |:Compile|.

    Parameters:
	- {param} (table) a table, identical to the tables passed into Neovim
	  commands (optional)
	    - {param.args}: the string of the command itself, or `nil` if the
	      user should be prompted to enter a command
	    - {param.smods}: a table - see the mods field of
	      |nvim_parse_cmd()| for more

						    *compile-mode.recompile()*
recompile({param}) ~
    Reruns the last compiled command. See |:Recompile|.

    Parameters:
	- {param} (table) a table, identical to the tables passed into Neovim
	  commands (optional)
	    - {param.smods}: a table - see the `mods` field of
	      |nvim_parse_cmd()| for more

						*compile-mode.current_error()*
current_error() ~
    Jumps to the current error within the compilation buffer. See
    |:CurrentError|.

						   *compile-mode.next_error()*
next_error() ~
    Jumps to the next error within the compilation buffer. See |:NextError|.

						   *compile-mode.prev_error()*
prev_error() ~
    Jumps to a prior error within the compilation buffer. See |:PrevError|.

					       *compile-mode.send_to_qflist()*
send_to_qflist() ~
    Loads all compilation errors into the quickfix list, replacing the
    existing list.

						*compile-mode.add_to_qflist()*
add_to_qflist() ~
    Loads all compilation errors into the quickfix list, appending onto the
    existing list.

						   *compile-mode.goto_error()*
goto_error() ~
    Jumps to the error under the cursor. See |:CompileGotoError|.

					   *compile-mode.move_to_next_error()*
move_to_next_error() ~
    Move to the line of the next error within the compilation buffer. See
    |:CompileNextError|.

					   *compile-mode.move_to_next_file()*
move_to_next_file() ~
    Move to the line of the next error within the compilation buffer that has
    a different file to the current error. See |:CompileNextFile|.

					   *compile-mode.move_to_prev_error()*
move_to_prev_error() ~
    Move to the line of the previous error within the compilation buffer. See
    |:CompilePrevError|.

					    *compile-mode.move_to_prev_file()*
move_to_prev_file() ~
    Move to the line of the previous error within the compilation buffer that
    has a different file to the current error. See |:CompilePrevFile|.

						    *compile-mode.interrupt()*
interrupt() ~
    Interrupts the currently running compilation. See |:CompileInterrupt|.

==============================================================================
6. Commands                                            *compile-mode-commands*


								    *:Compile*
:Compile ~
    Runs a command and places its output in the compilation buffer. The
    command is run from the current working directory. The compilation buffer
    is opened in a new split if it isn’t already opened. If an argument is
    present, it is used as the command. Otherwise, the user is prompted using
    |vim.ui.input()|.

    The following commands work when prefixed to `:Compile`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|

    Additionally, you can run the command with a |count| to set the size of
    the opened window, like with |:split|.

								  *:Recompile*
:Recompile ~
    Reruns the last compiled command. If there isn’t one, the error is
    reported using |vim.notify()|. The compilation buffer is opened in a new
    split if it isn’t already opened. The command is rerun from the directory
    in which it was originally run.

    The following commands work when prefixed to `:Recompile`:

    - |:vert|
    - |:aboveleft|, |:belowright|, |:topleft| and |:botright|
    - |:silent|
    - |:hide|

    Additionally, you can run the command with a |count| to set the size of the
    opened window, like with |:split|.

							       *:CurrentError*
:CurrentError ~
    Jump to the current error in the compilation buffer. This works using the
    same cursor that |:NextError| and |:PrevError| operate on, and acts as a
    way to jump back to the error you were working after a bit of iteration
    and jumping through files. As long as the current error is before the
    first error (the default until |:NextError| has not yet been used) this
    command has no effect and reports on this fact.

								  *:NextError*
:NextError ~
    Jump to the next error in the compilation buffer. This does not take the
    cursor into effect - it simply starts at the first error in the buffer and
    continues, one by one, from there. Once the last error in the buffer is
    reached the command has no effect and reports on this fact.

								  *:PrevError*
:PrevError ~
    Jump to a prior error in the compilation buffer. This does not take the
    cursor into effect - it simply starts at the current error in the buffer
    and continues backwards, one by one, from there. As long as the current
    error is before the first error (the default until |:NextError| has not
    yet been used) this command has no effect and reports on this fact.

							     *:QuickfixErrors*
:QuickfixErrors ~
    Load all compilation errors into the quickfix list, replacing it (uses
    |compile-mode.send_to_qflist()|), and then opens the quickfix window using
    `:botright copen` (see |:botright| and |:copen|).

							   *:CompileGotoError*
:CompileGotoError ~
    Only available within the compilation buffer itself.

    Jump to the error present in the line under the cursor. If no such error
    exists, the command reports on this fact.

							   *:CompileNextError*
:CompileNextError ~
    Only available within the compilation buffer itself.

    Move to the line of the next error within the compilation buffer. Does not
    jump to the error's actual file.

							   *:CompileNextFile*
:CompileNextFile ~
    Only available within the compilation buffer itself.

    Move to the line of the next error within the compilation buffer that has
    a different file to the current error. Does not jump to the error's actual
    file.

							   *:CompilePrevError*
:CompilePrevError ~
    Only available within the compilation buffer itself.

    Move to the line of the previous error within the compilation buffer. Does
    not jump to the error's actual file.

							    *:CompilePrevFile*
:CompilePrevFile ~
    Only available within the compilation buffer itself.

    Move to the line of the previous error within the compilation buffer that
    has a different file to the current error. Does not jump to the error's
    actual file.

							   *:CompileInterrupt*
:CompileInterrupt ~
    Only available within the compilation buffer itself.

    Interrupt the currently running compilation command, reporting on this in
    the compilation buffer.

    Mapped to `<C-c>` within the compilation buffer.

 vim:tw=78:ts=8:noet:ft=help:norl:
