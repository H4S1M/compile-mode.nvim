*compile-mode.txt*         For NVIM v0.8.0        Last change: 2023 October 29

==============================================================================
Table of Contents                             *compile-mode-table-of-contents*

1. Introduction                                    |compile-mode-introduction|
2. Installation                                    |compile-mode-installation|
3. API                                                      |compile-mode-api|
4. Commands                                            |compile-mode-commands|

==============================================================================
1. Introduction                                    *compile-mode-introduction*

`compile-mode.nvim` is a Neovim plugin which emulates the features of Emacs’
`Compilation Mode`. It allows you to run commands which are output into a
special buffer, and then rerun that command over and over again as much as you
need. See Emacs Compilation Mode
<https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html>
for more details.


==============================================================================
2. Installation                                    *compile-mode-installation*

Use your favorite plugin manager. `compile-mode.nvim` depends on plenary.nvim
<https://github.com/nvim-lua/plenary.nvim> and on baleia.nvim
<https://github.com/m00qek/baleia.nvim> (unless the
|compile-mode-`no_baleia_support`| option is set).

Here’s an example of a Lazy <https://github.com/folke/lazy.nvim> config for
`compile-mode.nvim`:

>lua
    return {
      "ej-shafran/compile-mode.nvim",
      branch = "latest",
      -- or a specific version:
      -- tag = "v1.0.2"
      dependencies = {
        "nvim-lua/plenary.nvim",
        { "m00qek/baleia.nvim", tag = "v1.3.0" },
      },
      opts = {
        -- you can disable colors by uncommenting this line
        -- no_baleia_support = true,
        default_command = "npm run build"
      }
    }
<


==============================================================================
3. API                                                      *compile-mode-api*

compile_mode.setup({opts})                    *compile-mode.setup()*

You don’t have to call `compile_mode.setup()` for the plugin to work; it just
allows you to configure the plugin to your needs.

Usage:

>lua
    require("compile-mode").setup({
        -- you can disable colors by uncommenting this line
        -- no_baleia_support = true,
        default_command = "npm run build"
    })
<

Valid keys and values for {opts}:


                                            *compile-mode-no_baleia_support*


no_baleia_support                      By default, `compile-mode.nvim` uses `baleia.nvim` to color in ANSI color escape sequences in the compilation buffer.
                                       You can disable this behavior by setting this config option to `true`.




                                              *compile-mode-default_command*


default_command                        The string to show in the |compile-mode.compile()| prompt as a default. You can set it to `""` for an empty prompt.
                                       Defaults to: `"make -k "`.




                                                  *compile-mode-time_format*


time_format                            The way to format the time displayed at the top of the Compilation buffer. Passed into |strftime()|.
                                       Defaults to: `"%a %b %e %H:%M:%S"`.



Table of options to pass into `baleia.setup()`. Defaults to an empty table.


                                               *compile-mode-baleia_options*


baleia_options                         Table of options to pass into `baleia.setup()`.
                                       Defaults to an empty table



compile_mode.compile({param})                   *compile-mode.compile()*

Run a command and place its output in the compilation buffer, reporting on its
result. The command is run from the current working directory. The compliation
buffer is opened in a new split if it isn’t already opened. If {param.args}
is not passed in, the user is prompted for a command using |vim.ui.input()|.


PARAMETERS ~

- {param} (table) a table, identical to the tables passed into Neovim commands (optional)
    - {param.args}: the string of the command itself, or `nil` if the user should be prompted to enter a command
    - {param.smods}: a table - see the mods field of |nvim_parse_cmd()| for more
        - {param.smods.vertical}: makes the window split vertically if the compilation buffer is not yet open
        - {param.smods.silent}: does not print any information
        - {param.smods.split}: modifications for the placement of the split

compile_mode.recompile()                    *compile-mode.recompile()*

Reruns the last compiled command. If there isn’t one, the error is reported
using |vim.notify()|. The compliation buffer is opened in a new split if it
isn’t already opened. The command is rerun from the directory in which it was
originally run.


PARAMETERS ~

- {param} (table) a table, identical to the tables passed into Neovim commands (optional)
    - {param.smods}: a table - see the mods field of |nvim_parse_cmd()| for more
        - {param.smods.vertical}: makes the window split vertically if the compilation buffer is not yet open
        - {param.smods.silent}: does not print any information
        - {param.smods.split}: modifications for the placement of the split


==============================================================================
4. Commands                                            *compile-mode-commands*


                                                     *compile-mode-:Compile*


:Compile                               Runs a command and places its output in the compilation buffer.
                                       The command is run from the current working directory.
                                       The compliation buffer is opened in a new split if it isn’t already opened.
                                       If an argument is present, it is used as the command. Otherwise, the user is prompted using |vim.ui.input()|.
                                       You can run the command using |:vert| to split the window vertically. |:aboveleft|, |:belowright|, |:topleft| and |:botright| also modify the split.
                                       You can run the command using |:silent| to get rid of the "Compilation finished" messages.




                                                   *compile-mode-:Recompile*


:Recompile                             Reruns the last compiled command. If there isn’t one, the error is reported using |vim.notify()|.
                                       The compliation buffer is opened in a new split if it isn’t already opened.
                                       The command is rerun from the directory in which it was originally run.
                                       You can run the command using |:vert| to split the window vertically. |:aboveleft|, |:belowright|, |:topleft| and |:botright| also modify the split.
                                       You can run the command using |:silent| to get rid of the "Compilation finished" messages.



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
