*compile-mode.txt*        For NVIM v0.8.0        Last change: 2023 November 14

==============================================================================
Table of Contents                             *compile-mode-table-of-contents*

1.                                                             |compile-mode-|
  -                                                           |compile-mode--|
  -                                                           |compile-mode--|
  -                                                           |compile-mode--|
2.                                                             |compile-mode-|
                           *compile-mode.error_regexp_table*

The default for `error_regexp_table` is:
 ~

>lua
    error_regexp_table = {
        absoft = {
            regex = '^\\%([Ee]rror on \\|[Ww]arning on\\( \\)\\)\\?[Ll]ine[     ]\\+\\([0-9]\\+\\)[     ]\\+of[     ]\\+"\\?\\([a-zA-Z]\\?:\\?[^":\n]\\+\\)"\\?:',
            filename = 3,
            row = 2,
            type = { 1 },
        },
        ada = {
            regex = "\\(warning: .*\\)\\? at \\([^ \n]\\+\\):\\([0-9]\\+\\)$",
            filename = 2,
            row = 3,
            type = { 1 },
        },
        aix = {
            regex = " in line \\([0-9]\\+\\) of file \\([^ \n]\\+[^. \n]\\)\\.\\? ",
            filename = 2,
            row = 1,
        },
        ant = {
            regex = "^[     ]*\\%(\\[[^] \n]\\+\\][     ]*\\)\\{1,2\\}\\(\\%([A-Za-z]:\\)\\?[^: \n]\\+\\):\\([0-9]\\+\\):\\%(\\([0-9]\\+\\):\\([0-9]\\+\\):\\([0-9]\\+\\):\\)\\?\\( warning\\)\\?",
            filename = 1,
            row = { 2, 4 },
            col = { 3, 5 },
            type = { 6 },
        },
        bash = {
            regex = "^\\([^: \n ]\\+\\): line \\([0-9]\\+\\):",
            filename = 1,
            row = 2,
        },
        borland = {
            regex = "^\\%(Error\\|Warnin\\(g\\)\\) \\%([FEW][0-9]\\+ \\)\\?\\([a-zA-Z]\\?:\\?[^:(   \n]\\+\\) \\([0-9]\\+\\)\\%([)  ]\\|:[^0-9\n]\\)",
            filename = 2,
            row = 3,
            type = { 1 },
        },
        python_tracebacks_and_caml = {
            regex = '^[     ]*File \\("\\?\\)\\([^," \n <>]\\+\\)\\1, lines\\? \\([0-9]\\+\\)-\\?\\([0-9]\\+\\)\\?\\%($\\|,\\%( characters\\? \\([0-9]\\+\\)-\\?\\([0-9]\\+\\)\\?:\\)\\?\\([ \n]Warning\\%( [0-9]\\+\\)\\?:\\)\\?\\)',
            filename = 2,
            row = { 3, 4 },
            col = { 5, 6 },
            type = { 7 },
        },
        cmake = {
            regex = "^CMake \\%(Error\\|\\(Warning\\)\\) at \\(.*\\):\\([1-9][0-9]*\\) ([^)]\\+):$",
            filename = 2,
            row = 3,
            type = { 1 },
        },
        cmake_info = {
            regex = "^  \\%( \\*\\)\\?\\(.*\\):\\([1-9][0-9]*\\) ([^)]\\+)$",
            filename = 1,
            row = 2,
            type = M.level.INFO,
        },
        comma = {
            regex = '^"\\([^," \n   ]\\+\\)", line \\([0-9]\\+\\)\\%([(. pos]\\+\\([0-9]\\+\\))\\?\\)\\?[:.,; (-]\\( warning:\\|[-0-9 ]*(W)\\)\\?',
            filename = 1,
            row = 2,
            col = 3,
            type = { 4 },
        },
        cucumber = {
            regex = "\\%(^cucumber\\%( -p [^[:space:]]\\+\\)\\?\\|#\\)\\%( \\)\\([^(].*\\):\\([1-9][0-9]*\\)",
            filename = 1,
            row = 2,
        },
        msft = {
            regex = "^ *\\([0-9]\\+>\\)\\?\\(\\%([a-zA-Z]:\\)\\?[^ :(   \n][^:( \n]*\\)(\\([0-9]\\+\\)) \\?: \\%(see declaration\\|\\%(warnin\\(g\\)\\|[a-z ]\\+\\) C[0-9]\\+:\\)",
            filename = 2,
            row = 3,
            type = { 4 },
        },
        edg_1 = {
            regex = "^\\([^ \n]\\+\\)(\\([0-9]\\+\\)): \\%(error\\|warnin\\(g\\)\\|remar\\(k\\)\\)",
            filename = 1,
            row = 2,
            type = { 3, 4 },
        },
        edg_2 = {
            regex = 'at line \\([0-9]\\+\\) of "\\([^ \n]\\+\\)"$',
            filename = 2,
            row = 1,
            type = M.level.INFO,
        },
        epc = {
            regex = "^Error [0-9]\\+ at (\\([0-9]\\+\\):\\([^)\n]\\+\\))",
            filename = 2,
            row = 1,
        },
        ftnchek = {
            regex = "\\(^Warning .*\\)\\? line[ \n]\\([0-9]\\+\\)[ \n]\\%(col \\([0-9]\\+\\)[ \n]\\)\\?file \\([^ :;\n]\\+\\)",
            filename = 4,
            row = 2,
            col = 3,
            type = { 1 },
        },
        gradle_kotlin = {
            regex = "^\\%(\\(w\\)\\|.\\): *\\(\\%([A-Za-z]:\\)\\?[^:\n]\\+\\): *(\\([0-9]\\+\\), *\\([0-9]\\+\\))",
            filename = 2,
            row = 3,
            col = 4,
            type = { 1 },
        },
        iar = {
            regex = '^"\\(.*\\)",\\([0-9]\\+\\)\\s-\\+\\%(Error\\|Warnin\\(g\\)\\)\\[[0-9]\\+\\]:',
            filename = 1,
            row = 2,
            type = { 3 },
        },
        ibm = {
            regex = "^\\([^( \n ]\\+\\)(\\([0-9]\\+\\):\\([0-9]\\+\\)) : \\%(warnin\\(g\\)\\|informationa\\(l\\)\\)\\?",
            filename = 1,
            row = 2,
            col = 3,
            type = { 4, 5 },
        },
        irix = {
            regex = '^[-[:alnum:]_/ ]\\+: \\%(\\%([sS]evere\\|[eE]rror\\|[wW]arnin\\(g\\)\\|[iI]nf\\(o\\)\\)[0-9 ]*: \\)\\?\\([^," \n   ]\\+\\)\\%(, line\\|:\\) \\([0-9]\\+\\):',
            filename = 3,
            row = 4,
            type = { 1, 2 },
        },
        java = {
            regex = "^\\%([     ]\\+at \\|==[0-9]\\+== \\+\\%(at\\|b\\(y\\)\\)\\).\\+(\\([^()\n]\\+\\):\\([0-9]\\+\\))$",
            filename = 2,
            row = 3,
            type = { 1 },
        },
        jikes_file = {
            regex = '^\\%(Found\\|Issued\\) .* compiling "\\(.\\+\\)":$',
            filename = 1,
            type = M.level.INFO,
        },
        maven = {
            regex = "^\\%(\\[\\%(ERROR\\|\\(WARNING\\)\\|\\(INFO\\)\\)] \\)\\?\\([^\n []\\%([^\n :]\\| [^\n/-]\\|:[^\n []\\)*\\):\\[\\([[:digit:]]\\+\\),\\([[:digit:]]\\+\\)] ",
            filename = 3,
            row = 4,
            col = 5,
            type = { 1, 2 },
        },
        clang_include = {
            regex = "^In file included from \\([^\n:]\\+\\):\\([0-9]\\+\\):$",
            filename = 1,
            row = 2,
            type = M.level.INFO,
        },
        gcc_include = {
            regex = "^\\%(In file included \\|                 \\|  \\)from \\([0-9]*[^0-9\n]\\%([^\n :]\\| [^-/\n]\\|:[^ \n]\\)\\{-}\\):\\([0-9]\\+\\)\\%(:\\([0-9]\\+\\)\\)\\?\\%(\\(:\\)\\|\\(,\\|$\\)\\)\\?",
            filename = 1,
            row = 2,
            col = 3,
            type = { 4, 5 },
        },
        ["ruby_Test::Unit"] = {
            regex = "^    [[ ]\\?\\([^ (].*\\):\\([1-9][0-9]*\\)\\(\\]\\)\\?:in ",
            filename = 1,
            row = 2,
        },
        gmake = {
            regex = ": \\*\\*\\* \\[\\%(\\(.\\{-1,}\\):\\([0-9]\\+\\): .\\+\\)\\]",
            filename = 1,
            row = 2,
            type = M.level.INFO,
        },
        gnu = {
            regex = "^\\%([[:alpha:]][-[:alnum:].]\\+: \\?\\|[  ]\\%(in \\| from\\)\\)\\?\\(\\%([0-9]*[^0-9\\n]\\)\\%([^\\n :]\\| [^-/\\n]\\|:[^ \\n]\\)\\{-}\\)\\%(: \\?\\)\\([0-9]\\+\\)\\%(-\\([0-9]\\+\\)\\%(\\.\\([0-9]\\+\\)\\)\\?\\|[.:]\\([0-9]\\+\\)\\%(-\\%(\\([0-9]\\+\\)\\.\\)\\([0-9]\\+\\)\\)\\?\\)\\?:\\%( *\\(\\%(FutureWarning\\|RuntimeWarning\\|W\\%(arning\\)\\|warning\\)\\)\\| *\\([Ii]nfo\\%(\\>\\|formationa\\?l\\?\\)\\|I:\\|\\[ skipping .\\+ ]\\|instantiated from\\|required from\\|[Nn]ote\\)\\| *\\%([Ee]rror\\)\\|\\%([0-9]\\?\\)\\%([^0-9\\n]\\|$\\)\\|[0-9][0-9][0-9]\\)",
            filename = 1,
            row = { 2, 3 },
            col = { 5, 4 },
            type = { 8, 9 },
        },
        lcc = {
            regex = "^\\%(E\\|\\(W\\)\\), \\([^(\n]\\+\\)(\\([0-9]\\+\\),[  ]*\\([0-9]\\+\\)",
            filename = 2,
            row = 3,
            col = 4,
            type = { 1 },
        },
        makepp = {
            regex = "^makepp\\%(\\%(: warning\\(:\\).\\{-}\\|\\(: Scanning\\|: [LR]e\\?l\\?oading makefile\\|: Imported\\|log:.\\{-}\\) \\|: .\\{-}\\)`\\(\\(\\S \\{-1,}\\)\\%(:\\([0-9]\\+\\)\\)\\?\\)['(]\\)",
            filename = 4,
            row = 5,
            type = { 1, 2 },
        },
        mips_1 = {
            regex = " (\\([0-9]\\+\\)) in \\([^ \n]\\+\\)",
            filename = 2,
            row = 1,
        },
        mips_2 = {
            regex = " in \\([^()\n ]\\+\\)(\\([0-9]\\+\\))$",
            filename = 1,
            row = 2,
        },
        omake = {
            regex = "^\\*\\*\\* omake: file \\(.*\\) changed",
            filename = 1,
        },
        oracle = {
            regex = "^\\%(Semantic error\\|Error\\|PCC-[0-9]\\+:\\).* line \\([0-9]\\+\\)\\%(\\%(,\\| at\\)\\? column \\([0-9]\\+\\)\\)\\?\\%(,\\| in\\| of\\)\\? file \\(.\\{-}\\):\\?$",
            filename = 3,
            row = 1,
            col = 2,
        },
        perl = {
            regex = " at \\([^ \n]\\+\\) line \\([0-9]\\+\\)\\%([,.]\\|$\\| during global destruction\\.$\\)",
            filename = 1,
            row = 2,
        },
        php = {
            regex = "\\%(Parse\\|Fatal\\) error: \\(.*\\) in \\(.*\\) on line \\([0-9]\\+\\)",
            filename = 2,
            row = 3,
        },
        rxp = {
            regex = "^\\%(Error\\|Warnin\\(g\\)\\):.*\n.* line \\([0-9]\\+\\) char \\([0-9]\\+\\) of file://\\(.\\+\\)",
            filename = 4,
            row = 2,
            col = 3,
            type = { 1 },
        },
        sun = {
            regex = ": \\%(ERROR\\|WARNIN\\(G\\)\\|REMAR\\(K\\)\\) \\%([[:alnum:] ]\\+, \\)\\?File = \\(.\\+\\), Line = \\([0-9]\\+\\)\\%(, Column = \\([0-9]\\+\\)\\)\\?",
            filename = 3,
            row = 4,
            col = 5,
            type = { 1, 2 },
        },
        sun_ada = {
            regex = "^\\([^, \n ]\\+\\), line \\([0-9]\\+\\), char \\([0-9]\\+\\)[:., (-]",
            filename = 1,
            row = 2,
            col = 3,
        },
        watcom = {
            regex = "^[     ]*\\(\\%([a-zA-Z]:\\)\\?[^ :(   \n][^:( \n]*\\)(\\([0-9]\\+\\)): \\?\\%(\\(Error! E[0-9]\\+\\)\\|\\(Warning! W[0-9]\\+\\)\\):",
            filename = 1,
            row = 2,
            type = { 4 },
        },
        ["4bsd"] = {
            regex = "\\%(^\\|::  \\|\\S ( \\)\\(/[^ \n  ()]\\+\\)(\\([0-9]\\+\\))\\%(: \\(warning:\\)\\?\\|$\\| ),\\)",
            filename = 1,
            row = 2,
            type = { 3 },
        },
        ["perl__Pod::Checker"] = {
            regex = "^\\*\\*\\* \\%(ERROR\\|\\(WARNING\\)\\).* \\%(at\\|on\\) line \\([0-9]\\+\\) \\%(.* \\)\\?in file \\([^    \n]\\+\\)",
            filename = 3,
            row = 2,
            type = { 1 },
        },
    }
<


==============================================================================
1.                                                             *compile-mode-*

compile_mode.setup({opts})                    *compile-mode.setup()*





>lua
    require("compile-mode").setup({
        -- you can disable colors by uncommenting this line
        -- no_baleia_support = true,
        default_command = "npm run build",
    })
<



error_regexp_table

See |compile-mode-errors|.


                                            *compile-mode-no_baleia_support*


no_baleia_support                      By default, `compile-mode.nvim` uses `baleia.nvim` to color in ANSI color escape sequences in the compilation buffer.
                                       You can disable this behavior by setting this config option to `true`.




                                              *compile-mode-default_command*


default_command                        The string to show in the |compile-mode.compile()| prompt as a default. You can set it to `""` for an empty prompt.
                                       Defaults to: `"make -k "`.




                                                  *compile-mode-time_format*


time_format                            The way to format the time displayed at the top of the compilation buffer. Passed into |strftime()|.
                                       Defaults to: `"%a %b %e %H:%M:%S"`.




                                               *compile-mode-baleia_options*


baleia_options                         Table of options to pass into `baleia.setup()`.
                                       Defaults to an empty table




                                                  *compile-mode-buffer_name*


buffer_name                            The name for the compilation buffer.
                                       Defaults to: `"*compilation*"`.




                                             *compile-mode-error_highlights*


error_highlights                       A table of highlights to use for errors in the compilation buffer. The possible keys are:



- {error} applied to the entire captured error (optional)
- {error_row} applied to the number that specifies the row (or range of rows) of the error (optional)
- {error_col} applied to the number that specifies the column (or range of columns) of the error (optional)
- {error_filename} applied to the filename in which the error ocurred, when the error is of type `ERROR` (optional)
- {warning_filename} applied to the filename in which the error ocurred, when the error is of type `WARNING` (optional)
- {info_filename} applied to the filename in which the error ocurred, when the error is of type `INFO` (optional)

Each of the values is a table, with the following keys:

- {background} (string) sets the |guibg| of the highlight group (optional)
- {foreground} (string) sets the |guifg| of the highlight group (optional)
- {gui} (string) sets the |highlight-gui| of the highlight group, and can be a comma-seperated list of attributes (optional)

You can use an empty table to remove all styles from a group.

The defaults for `error_highlights` are:

>lua
    default_highlights = {
        error = {
            gui = "underline",
        },
        error_row = {
            gui = "underline",
            foreground = theme[2],
        },
        error_col = {
            gui = "underline",
            foreground = theme[8],
        },
        error_filename = {
            gui = "bold,underline",
            foreground = theme[9],
        },
        warning_filename = {
            gui = "underline",
            foreground = theme[3],
        },
        info_filename = {
            gui = "underline",
            foreground = theme[14],
        },
    }
<


                                                        *compile-mode-debug*


debug                                  Print additional debug information. This is printed using Lua’s print, so you can inspect it with |:messages|.




                                       *compile-mode-error_ignore_file_list*


error_ignore_file_list                 A list of Vim regexes to run each error’s filename by, to check if this file should be ignored.



Defaults to: `{ "/bin/[a-z]*sh$" }`. Passing in this option does not override
this, but instead extends the list.


                                    *compile-mode-compilation_hidden_output*


compilation_hidden_output              A Vim regex or list of Vim regexes run on every line in the compilation buffer which will be substituted with empty strings.



compile_mode.compile({param})                   *compile-mode.compile()*




 ~



compile_mode.recompile()                    *compile-mode.recompile()*




 ~




                                                              *compile-mode--*




                                                              *compile-mode--*




                                                              *compile-mode--*




==============================================================================
2.                                                             *compile-mode-*


                                                     *compile-mode-:Compile*


:Compile                               Runs a command and places its output in the compilation buffer.
                                       The command is run from the current working directory.
                                       The compilation buffer is opened in a new split if it isn’t already opened.
                                       If an argument is present, it is used as the command. Otherwise, the user is prompted using |vim.ui.input()|.
                                       You can run the command using |:vert| to split the window vertically. |:aboveleft|, |:belowright|, |:topleft| and |:botright| also modify the split.
                                       You can run the command using |:silent| to get rid of the "Compilation finished" messages.




                                                   *compile-mode-:Recompile*


:Recompile                             Reruns the last compiled command. If there isn’t one, the error is reported using |vim.notify()|.
                                       The compilation buffer is opened in a new split if it isn’t already opened.
                                       The command is rerun from the directory in which it was originally run.
                                       You can run the command using |:vert| to split the window vertically. |:aboveleft|, |:belowright|, |:topleft| and |:botright| also modify the split.
                                       You can run the command using |:silent| to get rid of the "Compilation finished" messages.




                                                   *compile-mode-:NextError*


:NextError                             Jump to the next error in the compilation buffer. This does not take the cursor into effect - it simply starts at the first error in the buffer and continues, one by one, from there. Once the last error in the buffer is reached the command has no effect and reports on this fact.




                                                   *compile-mode-:PrevError*


:PrevError                             Jump to a prior error in the compilation buffer. This does not take the cursor into effect - it simply starts at the current error in the buffer and continues backwards, one by one, from there. As long as the current error is before the first error (the default until |compile-mode-`:nexterror`| has not yet been used) this command has no effect and reports on this fact.




                                            *compile-mode-:CompileGotoError*


:CompileGotoError                      Only available within the compilation buffer itself.



Jump to the error present in the line under the cursor. If no such error
exists, the command reports on this fact.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
