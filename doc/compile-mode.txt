*compile-mode.txt*        For NVIM v0.8.0        Last change: 2024 February 27

==============================================================================
Table of Contents                             *compile-mode-table-of-contents*

1. Introduction                                    |compile-mode-introduction|
2. Installation                                    |compile-mode-installation|
3. Compilation buffer                        |compile-mode-compilation-buffer|
4. Errors                                                |compile-mode-errors|
5. API                                                      |compile-mode-api|
  - next_error()                               |compile-mode-api-next_error()|
  - prev_error()                               |compile-mode-api-prev_error()|
  - goto_error()                               |compile-mode-api-goto_error()|
  - interrupt()                                 |compile-mode-api-interrupt()|
6. Commands                                            |compile-mode-commands|

==============================================================================
1. Introduction                                    *compile-mode-introduction*

`compile-mode.nvim` is a Neovim plugin which emulates the features of Emacs’
`Compilation Mode`. It allows you to run commands which are output into a
special buffer, and then rerun that command over and over again as much as you
need. See Emacs Compilation Mode
<https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html>
for more details.


==============================================================================
2. Installation                                    *compile-mode-installation*

Use your favorite plugin manager. `compile-mode.nvim` depends on plenary.nvim
<https://github.com/nvim-lua/plenary.nvim> and on baleia.nvim
<https://github.com/m00qek/baleia.nvim> (unless the
|compile-mode-`no_baleia_support`| option is set).

Here’s an example of a Lazy <https://github.com/folke/lazy.nvim> config for
`compile-mode.nvim`:

>lua
    return {
      "ej-shafran/compile-mode.nvim",
      branch = "latest",
      -- or a specific version:
      -- tag = "v2.0.0"
      dependencies = {
        "nvim-lua/plenary.nvim",
        { "m00qek/baleia.nvim", tag = "v1.3.0" },
      },
      opts = {
        -- you can disable colors by uncommenting this line
        -- no_baleia_support = true,
        default_command = "npm run build"
      }
    }
<


==============================================================================
3. Compilation buffer                        *compile-mode-compilation-buffer*

The compilation buffer is the buffer into which the output of compilation
commands is placed. By default, its name is `"*compilation*"` (though this can
be configured using the |compile-mode-`buffer_name`| option). Its filetype is
`compilation` - this can be used to setup |autocmd|s (and thus custom keymaps
and the like).

After a command has been run, the buffer’s output will contain:

- the "default directory" - i.e., the current working directory from which the
    command was run
- the time at which compilation started
- the compilation command which was executed
- the output (`stdout` and `stderr`) of the command
- the exit status of the command (a command can exit successfully, abnormally,
    or by interruption) and when it occurred

If a compilation command is running and another one is triggered, the first
command is terminated (using |jobstop|) and this interruption is reported in
the compilation buffer. Then, after a tiny delay, the compilation buffer is
cleared and the new command starts running.

The compilation buffer has a few local commands and keymaps. The local commands
are |compile-mode-`:compilegotoerror`| and |compile-mode-`:compileinterrupt`|,
mapped to `<CR>` and `<C-c>` respectively. Additionally, `q` is mapped to
`<CMD>q<CR>` to allow for easy closing of the compilation buffer.

The compilation buffer is deleted automatically when Neovim would be closed, so
unsaved changes don’t get in the way. It also has the |'buftype'| option set
to `acwrite`.


==============================================================================
4. Errors                                                *compile-mode-errors*

The compilation buffer is checked for errors in real-time, which can then be
navigated between using |compile-mode-`compilegotoerror`|,
|compile-mode-`nexterror`| and |compile-mode-`preverror`|.

                           *compile-mode.error_regexp_table*

Errors are defined using the `error_regexp_table` option. Each field in the
table consists of a key (the name of the error’s source, used for debug
information) and a table value. This table has the following keys:

- {regex} (string) a Vim regex which captures the error and the relevant capture
    groups; if this regex matches a line an error is determined to be on that line
- {filename} (integer) the capture group number for the error’s filename
    (capture groups start at 1)
- {row} (integer|[integer, integer]) either the capture group for the row on
    which the error occurred, or capture groups for the start and end of the row
    range in which the error occurred (optional)
- {col} (integer|[integer, integer]) either the capture group for the column on
    which the error occurred, or the capture groups for the start and end of the
    column range in which the error occurred (optional)
- {type} (level|[integer,integer?]) either an error type (`INFO`, `WARNING`, or
    `ERROR`, taken from `require("compile-mode").level`) or a tuple of capture
    groups (optional, default `ERROR`)
    - If capture groups are provided and the first capture group is matched, the
        error is considered of type `WARNING`. If the second capture group matched,
        the error is considered to be of type `INFO`. -

**Note:** a type alias - `RegexpMatcher` - is available for the values of
`error_regexp_table`

For example, to add TypeScript errors:

>lua
    require("compile-mode").setup({
        error_regexp_table = {
          typescript = {
        -- TypeScript errors take the form
        -- "path/to/error-file.ts(13,23): error TS22: etc."
            regex = "^\\(.\\+\\)(\\([1-9][0-9]*\\),\\([1-9][0-9]*\\)): error TS[1-9][0-9]*:",
            filename = 1,
            row = 2,
            col = 3,
          }
        }
    })
<

To see the default for `error_regexp_table`, look at the source code in
`lua/compile-mode/errors.lua` in the plugin’s directory (or in the repo
itself).


==============================================================================
5. API                                                      *compile-mode-api*

compile_mode.setup({opts})                    *compile-mode.setup()*

Sets up the plugin for use.

Usage:

>lua
    require("compile-mode").setup({
        -- you can disable colors by uncommenting this line
        -- no_baleia_support = true,
        default_command = "npm run build",
    })
<

Valid keys and values for {opts}:

error_regexp_table

See |compile-mode-errors|.


                                            *compile-mode-no_baleia_support*


no_baleia_support                      By default, `compile-mode.nvim` uses `baleia.nvim` to color in ANSI color
                                       escape sequences in the compilation buffer. You can disable this behavior by
                                       setting this config option to `true`.




                                              *compile-mode-default_command*


default_command                        The string to show in the |compile-mode.compile()| prompt as a default. You
                                       can set it to `""` for an empty prompt. Defaults to: `"make -k "`.




                                                  *compile-mode-time_format*


time_format                            The way to format the time displayed at the top of the compilation buffer.
                                       Passed into |strftime()|. Defaults to: `"%a %b %e %H:%M:%S"`.




                                               *compile-mode-baleia_options*


baleia_options                         Table of options to pass into `baleia.setup()`.
                                       Defaults to an empty table




                                                  *compile-mode-buffer_name*


buffer_name                            The name for the compilation buffer.
                                       Defaults to: `"*compilation*"`.




                                             *compile-mode-error_highlights*


error_highlights                       A table of highlights to use for errors in the compilation buffer. The
                                       possible keys are:



- {error} applied to the entire captured error (optional)
- {error_row} applied to the number that specifies the row (or range of rows) of
    the error (optional)
- {error_col} applied to the number that specifies the column (or range of
    columns) of the error (optional)
- {error_filename} applied to the filename in which the error ocurred, when the
    error is of type `ERROR` (optional)
- {warning_filename} applied to the filename in which the error ocurred, when
    the error is of type `WARNING` (optional)
- {info_filename} applied to the filename in which the error ocurred, when the
    error is of type `INFO` (optional)

Each of the values is a table, with the following keys:

- {background} (string) sets the |guibg| of the highlight group (optional)
- {foreground} (string) sets the |guifg| of the highlight group (optional)
- {gui} (string) sets the |highlight-gui| of the highlight group, and can be
    a comma-seperated list of attributes (optional)

You can use an empty table to remove all styles from a group.

The defaults for `error_highlights` are:

>lua
    default_highlights = {
        error = {
            gui = "underline",
        },
        error_row = {
            gui = "underline",
            foreground = theme[2],
        },
        error_col = {
            gui = "underline",
            foreground = theme[8],
        },
        error_filename = {
            gui = "bold,underline",
            foreground = theme[9],
        },
        warning_filename = {
            gui = "underline",
            foreground = theme[3],
        },
        info_filename = {
            gui = "underline",
            foreground = theme[14],
        },
    }
<


                                                        *compile-mode-debug*


debug                                  Print additional debug information. This is printed using Lua’s print, so you
                                       can inspect it with |:messages|.




                                       *compile-mode-error_ignore_file_list*


error_ignore_file_list                 A list of Vim regexes to run each error’s filename by, to check if this file
                                       should be ignored.



Defaults to: `{ "/bin/[a-z]*sh$" }`. Passing in this option does not override
this, but instead extends the list.


                                    *compile-mode-compilation_hidden_output*


compilation_hidden_output              A Vim regex or list of Vim regexes run on every line in the compilation buffer
                                       which will be substituted with empty strings.




                                            *compile-mode-recompile_no_fail*


recompile_no_fail                      When `true`, running |compile-mode-`:recompile`| without a prior command will
                                       not fail, but instead simply trigger a call to |compile-mode-`:compile`|.



compile_mode.compile({param})                   *compile-mode.compile()*

Run a command and place its output in the compilation buffer, reporting on its
result. See |compile-mode-`:compile`|.


PARAMETERS ~

- {param} (table) a table, identical to the tables passed into Neovim commands
    (optional)
    - {param.args}: the string of the command itself, or `nil` if the user should
        be prompted to enter a command
    - {param.smods}: a table - see the mods field of |nvim_parse_cmd()| for
        more

compile_mode.recompile()                *compile-mode.recompile()*

Reruns the last compiled command. See |compile-mode-`:recompile`|.


PARAMETERS ~

- {param} (table) a table, identical to the tables passed into Neovim commands
    (optional)
    - {param.smods}: a table - see the mods field of |nvim_parse_cmd()| for
        more


NEXT_ERROR()                                   *compile-mode-api-next_error()*

Jumps to the next error within the compilation buffer. See
|compile-mode-`:nexterror`|.


PREV_ERROR()                                   *compile-mode-api-prev_error()*

Jumps to a prior error within the compilation buffer. See
|compile-mode-`:preverror`|.


GOTO_ERROR()                                   *compile-mode-api-goto_error()*

Jumps to the error under the cursor. See |compile-mode-`:compilegotoerror`|.


INTERRUPT()                                     *compile-mode-api-interrupt()*

Interrupts the currently running compilation. See
|compile-mode-`:compileinterrupt`|.


==============================================================================
6. Commands                                            *compile-mode-commands*


                                                     *compile-mode-:Compile*


:Compile                               Runs a command and places its output in the compilation buffer. The command is
                                       run from the current working directory. The compilation buffer is opened in a
                                       new split if it isn’t already opened. If an argument is present, it is used as
                                       the command. Otherwise, the user is prompted using |vim.ui.input()|.



The following commands work when prefixed to `:Compile`:

- |:vert|
- |:aboveleft|, |:belowright|, |:topleft| and |:botright|
- |:silent|
- |:hide|

Additionally, you can run the command with a |count| to set the size of the
opened window, like with |:split|.


                                                   *compile-mode-:Recompile*


:Recompile                             Reruns the last compiled command. If there isn’t one, the error is reported
                                       using |vim.notify()|. The compilation buffer is opened in a new split if it
                                       isn’t already opened. The command is rerun from the directory in which it was
                                       originally run.



The following commands work when prefixed to `:Compile`:

- |:vert|
- |:aboveleft|, |:belowright|, |:topleft| and |:botright|
- |:silent|
- |:hide|

Additionally, you can run the command with a |count| to set the size of the
opened window, like with |:split|.


                                                   *compile-mode-:NextError*


:NextError                             Jump to the next error in the compilation buffer. This does not take the
                                       cursor into effect - it simply starts at the first error in the buffer and
                                       continues, one by one, from there. Once the last error in the buffer is reached
                                       the command has no effect and reports on this fact.




                                                   *compile-mode-:PrevError*


:PrevError                             Jump to a prior error in the compilation buffer. This does not take the cursor
                                       into effect - it simply starts at the current error in the buffer and continues
                                       backwards, one by one, from there. As long as the current error is before the
                                       first error (the default until |compile-mode-`:nexterror`| has not yet been used)
                                       this command has no effect and reports on this fact.




                                            *compile-mode-:CompileGotoError*


:CompileGotoError                      Only available within the compilation buffer itself.



Jump to the error present in the line under the cursor. If no such error
exists, the command reports on this fact.


                                            *compile-mode-:CompileInterrupt*


:CompileInterrupt                      Only available within the compilation buffer itself.



Interrupt the currently running compilation command, reporting on this in the
compilation buffer.

Mapped to `<C-c>` within the compilation buffer.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
